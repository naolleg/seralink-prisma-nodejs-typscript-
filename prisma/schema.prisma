// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum GENDER{
  MALE
  FEMALE
}
enum ROLE{
  ADMIN
  SEEKER
  PROVIDER
}




model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String?
  createdAt DateTime @default(now())

  profile   Profile?  
  professionalProfile ProfessionalProfile? 
  orgProfile  OrgProfile?
  address    Address? 
  apply       Apply[]   
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int@unique
  fname     String
  mname     String?
  lname     String
  sex       String?

  user      Users  @relation(fields: [userId], references: [id])
}

model ProfessionalProfile {
  id          Int      @id @default(autoincrement())
  birthDate   DateTime
  userId      Int @unique
  cv          String?
  qualification  String?
  portfolio   String?

  user      Users  @relation(fields: [userId], references: [id])
}

model OrgProfile {
  id        Int      @id @default(autoincrement())
  userId    Int@unique
  name      String
  tinNumber String?
  type      String
  sector    String
  job       Job[]
  user      Users  @relation(fields: [userId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int@unique
  city      String
  subcity   String?
  job      Job[]
  user      Users  @relation(fields: [userId], references: [id])
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  category    String
  salary      Decimal  @default(0)
  experience  Int
  qualification  String?
  quantity    Int
  addressId   Int
  orgProfileId Int
  createdAt   DateTime @default(now())
  deadline    DateTime?
  description String?

  address    Address  @relation(fields: [addressId], references: [id])
  orgProfile  OrgProfile  @relation(fields: [orgProfileId], references: [id])
  apply       Apply[]   
}

model Apply {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int

  user      Users?  @relation(fields: [userId], references: [id])
  job       Job  @relation(fields: [jobId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String  @unique
  message   String
}
